% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeWindowPictureFuncs.R
\name{phaseTankClustInGene}
\alias{phaseTankClustInGene}
\title{Constructs the cleavage windows images}
\usage{
phaseTankClustInGene(phaseTankClustall2 = phaseTankClustall)
}
\arguments{
\item{gffTrans}{\itemize{
\item a dataframe of your imported gff with V10 = transcript ID see  for example extendGffTrans in makeWindowPictureFunc for example
}}

\item{aliFilesPattern1}{\itemize{
\item regular expression defining the pattern of your first degradome library
}}

\item{aliFilesPattern2}{\itemize{
\item regular expression defining the pattern of your second degradome library
}}

\item{dirO}{\itemize{
\item output path
}}

\item{cleavageData}{\itemize{
\item must be a dataframe containing at least columns genesT (the target genes) and posT (target position in the transcript)
}}

\item{edgesExtend1}{\itemize{
\item how many positions from the cleavage site that are included in the pictures. Default is c(1,2),
defining 1 pos upstream and 21 positions downstream. As the degradome reads are 20 nt each this defines
1 position upstream and downstream of the degradome reads. Only one, to try and exclude as much background
as possible but still catch the caracteristic "cleavage block".
}}

\item{ylim1}{\itemize{
\item defines the minimum plotted height of the y-axis. In practise this means a lower "cleavage block"
will not be recognized by the CNN. This to exclude potential false positives caused by noice
}}

\item{onlyOneTest}{\itemize{
\item sometimes the script is missing one cleavage picture for unknown reasons. Hence,
not reporting that all files are created but still not creating any more. If this is the case
one can test for this by running with "onlyOneTest = T", default is F.
}}

\item{addToDir}{\itemize{
\item if one wants to add the pictures to the directory. Default is T. If F the user also need to
remove the has in the function script, this as a precaution not to remove any pictures by accident
}}

\item{aliFilesPath}{-path to the bamfiles  for the user defined degradome. The easiest is to use transcriptome
generated bam files. If you do so the path must end with "bamTranscriptome/". However, this option cannot check
for cleavages outside the transcripts (which is totally  fine if you have a well annotated genome).
If you have trascripts and a genome but no gff file you can create a gff with the function
makeGFF (reqires spaln installed on your system).
Also included is the function readGFF which is a basic function to import your GFF.
IMPORTANT!!! is that your gffTrans has a 10th column with your the transcript ID. Often this must be
extracted from the 9th column (V9). However, most GFF files I've been exposed to are different.
In the attached function extendGffTrans you can see how this was achieved from the Jupe dataset (Jupe et al. 2013)
I was using.}

\item{savePics}{T if you want the files to be saved in your dirO, F if just want them to be plotted in your RStudio browser. Default = T}

\item{jpegWidHei}{c(Width,Height), Width and height of saved jpeg images. Default = c(480,480)}

\item{qual}{Quality of your saved images. Default = 75}

\item{pz}{Pointsize of saved images. Default = 12}
}
\description{
This is an example for how the windows aka cleavage pictures might be created.
feel free to use your own pictures. However if using the CNN model we designed it is recommended
To adopt this script to your data as other pictures might not be recognized by the model.
}
\examples{
smartPARE_cleavageWindows(dirO = paste0("pathOut/"),
cleavageData = cleavageDataDataset,
aliFilesPath = "path/bamTranscriptome/",
aliFilesPattern1 = "pattern1.sorted.bam$",
aliFilesPattern2 = "pattern2.sorted.bam$",
ylim1 = 5,
addToDir = T,
onlyOneTest = F,
edgesExtend1 = c(1,21),
gffTrans = gffTrans
)

}
\keyword{smartPARE_cleavageWindows}
